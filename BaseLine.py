from findFeatures import train_findFeatures, test_findFeatures
from LoadImage import read_training_images, read_testing_images
import pandas as pd
from sklearn.ensemble import RandomForestClassifier



(images,classes,df_train) = read_training_images(img_width = 200, img_height = 200)

(training_features,voc) = train_findFeatures(images)

print("features:",type(training_features))
print("==========")
print("features.shape:",training_features.shape)
print("==========")


rf = RandomForestClassifier(n_estimators=100,
                 criterion="gini",
                 max_depth=None,
                 min_samples_split=2,
                 min_samples_leaf=1,
                 min_weight_fraction_leaf=0.,
                 max_features="auto",
                 max_leaf_nodes=None,
                 min_impurity_decrease=0.,
                 min_impurity_split=None,
                 bootstrap=True,
                 oob_score=False,
                 n_jobs=1,
                 random_state=None,
                 verbose=0,
                 warm_start=False,
                 class_weight=None)

print("\nStart training RF...")
rf.fit(training_features,classes)

print("\ntraining done !")



(test_images,df_test) = read_testing_images(img_width = 200, img_height = 200)

testing_features = test_findFeatures(test_images,voc)
print("\nStart predict...")
predict = rf.predict(testing_features)

print("\npredict done!")
targets_series = pd.Series(df_train['breed'])
one_hot = pd.get_dummies(targets_series, sparse = True)

sub = pd.DataFrame(predict)
# Set column names to those generated by the one-hot encoding earlier
col_names = one_hot.columns.values
sub.columns = col_names
# Insert the column id from the sample_submission at the start of the data frame
sub.insert(0, 'id', df_test['id'])
# sub.head(5)

submission = sub
submission.to_csv('baseline_submission.csv', index=False)


